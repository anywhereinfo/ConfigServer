buildscript {
	ext {
		springBootVersion = '1.4.0.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath('se.transmode.gradle:gradle-docker:1.2')
		classpath ('io.spring.gradle:dependency-management-plugin:0.5.6.RELEASE')
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'spring-boot'
apply plugin: 'docker'
apply plugin: 'war'
defaultTasks 'bootRun'

war {
    rootSpec.exclude("**/tomcat-*.jar")
}

bootRun {
    addResources = false
}

jar {
	baseName = 'ConfigServer'
	version = '0.0.1-SNAPSHOT'
}
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	mavenCentral()
}


dependencies {
	compile('org.springframework.cloud:spring-cloud-config-server')
	compile('org.springframework.cloud:spring-cloud-starter')
	testCompile('org.springframework.boot:spring-boot-starter-test')
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:Brixton.SR4"
	}
}


eclipse {
	classpath {
		 containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
		 containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
	}
	
task buildDocker(type: Docker) {
  	push = project.hasProperty('push')
  	tag = 'anywhereinfo/spring-config-server'
  	dockerfile = file('src/main/docker/Dockerfile')
  	doFirst {
    	copy {
      			from jar
      			into stageDir
    			}
  			}
  	}
  	}
  	
  	task stage(dependsOn: 'bootRepackage') {
}

compileJava.dependsOn processResources
processResources.dependsOn cleanResources
buildDocker.dependsOn(build)

